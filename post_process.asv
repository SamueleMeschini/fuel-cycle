I_bz = out.I_1;
I_tes = out.I_2;
I_FW = out.I_3;
I_div = out.I_4;
I_HX = out.I_5; % NB: for STEP it is a CPS
I_detr = out.I_6;
I_vp = out.I_7;
I_fc = out.I_8;
I_ISS = out.I_9;
I_st = out.I_11;
I_membrane = out.I_12;

% %% Plot the inflow to the storage system
% tflow_2 = I_tes/tau2*1000*eta2; %g/s
% tflow_9 = I_ISS/tau9*1000*(1-f96); %g/s
% tflow_7 = I_vp/tau7*1000*f_dir;
% tflow_11 = I_st/tau10*1000;
% t_d = doublingTime((I_s_0+0.1), out);  % add margin to I_s_0 (see utilities.findTBR)
% [dummy, index ] = min(I_st);
% t_infl = out.tout(index);
% t = out.tout(1:(index)) / 3600 / 24; % days
% t_one_day_index = find(out.tout>3600*24,1);
% t_one_day = out.tout(1:t_one_day_index);
% % t = out.tout;
% % plot(t,tflow_2(1:(2*index)))
% % hold on
% % plot(t,tflow_9(1:(2*index)))
% % hold on
% % plot(t,tflow_7(1:(2*index)))
% 
% % plot(t,(tflow_9(1:(index))+tflow_7(1:(index))-tflow_2(1:index)))
% % hold on 
% figure(1)
% plot(t,(tflow_9(1:(index))+tflow_7(1:(index))))
% % plot(t,tflow_11(1:index))
% yline(N_dot/f_b*1000*0.7,'-', 'T to fueling')
% 
% % Interpolate with an exponential function
% fun = (N_dot/eta_f/f_b*1000*0.7-(tflow_9(1:(index))+tflow_7(1:(index))));
% f = fit(t,fun,'exp1')
% fitted_f = f.a*exp(f.b*t)
% figure(2)
% plot(t,N_dot/f_b*1000*0.7-fitted_f)
% yline(N_dot/f_b*1000*0.7,'-', 'T to fueling')
%%

% Display tritium flows
tritium_flows = struct('bz', I_bz / tau1, 'TES', I_tes/tau2, 'FW', I_FW/tau3,'div', I_div / tau4, 'HX_or_CPS', I_HX/tau5, 'WEDS', I_detr/tau6, 'Vacuum_pumps', I_vp/tau7,'Fuel_clean_up', I_fc / tau8,'ISS', I_ISS/tau9);
fields = fieldnames(tritium_flows);
for idx=1:9
    display(fields(idx) + " = " + tritium_flows.(fields{idx})(end) + " kg/s or " + tritium_flows.(fields{idx})(end)*1000/3 + " mol/s or " + tritium_flows.(fields{idx})(end)*1000/3*2.27e3 + " Pa m3/s")
    writematrix([tritium_flows.(fields{idx})(end), tritium_flows.(fields{idx})(end)*1000/3, tritium_flows.(fields{idx})(end)*1000/3*2.27e3], 'tritiumFlows.xls','Sheet',1, 'Range', strcat('B',string(idx+2)))

end

% Display tritium inventories
tritium_inventories = struct('bz', I_bz, 'TES', I_tes, 'FW', I_FW,'div', I_div , 'HX_or_CPS', I_HX, 'WEDS', I_detr, 'Vacuum_pumps', I_vp,'Fuel_clean_up', I_fc ,'ISS', I_ISS);
fields = fieldnames(tritium_inventories);
for idx=1:9
    display(fields(idx) + " = " + tritium_inventories.(fields{idx})(end) + " kg")
%     writematrix([tritium_flows.(fields{idx})(end), tritium_flows.(fields{idx})(end)*1000/3, tritium_flows.(fields{idx})(end)*1000/3*2.27e3], 'tritiumFlows.xls','Sheet',1, 'Range', strcat('B',string(idx+2)))

end

% For error quantification use the scopes within the simulink model
% T_entering_bz = I_FW(end)/tau3 + I_div(end)/tau4 + I_HX(end)/tau5 + N_dot*TBR
% T_entering_TES = I_bz(end)/tau1
% T_exiting_TES = I_tes(end)/tau2
% error = (T_entering_TES - T_exiting_TES)/T_entering_TES*100
T_entering_storage = I_ISS(end)/tau9 + out.I_12(end)/tau12 + f_dir*I_vp(end)/tau7
T_exiting_storage = I_st(end)*lambda + N_dot/TBE


%%
t = out.tout / 3600 / 24; % days
t_d_req = 5 * 365; % 5 years
t_sim = 30 * 365;
% 
% % % Reserve inventory
% q = 0.25;
% t_res = 0 * 3600;
% I_res = N_dot/f_b*q*t_res;
% t_d = doublingTime((I_s_0+0.1), out);  % add margin to I_s_0 (see utilities.findTBR)
% [dummy, index ] = min(I_st);
% t_infl = out.tout(index);
% % 
% % Plot is in days
% loglog(t,I_ISS, 'k--', t, I_st, 'k', t, I_bz, 'k:', t, I_tes, 'k-.')
% hold on;
% % loglog(t,I_ISS_2, 'k--', t, I_st_2, 'k', t, I_bz_2, 'k:', t, I_tes_2, 'k-.')
% 
% xline(t_d, 'r')
% text(t_d + 100, 5,"t_d = " + round(t_d/365,1) + "y")
% %yline(2*I_s_0, 'r')
% xlim([1e-1 1e4])
% ylim([1e-3 1e4])
% xlabel('Time (days)')
% ylabel('Inventory (kg)')
% legend('ISS', 'storage', 'breeding zone', 'TES', 'Location', 'northwest')
% grid('on')
% disp("Doubling time:  " + t_d + " years")
% disp("Blanket inventory: " + round(max(I_bz)*1000,2) + " g" )
% disp("Inflection time: " + t_infl / 3600 + " h")



%%%%%%%%%%%%%%%%%%%%
% Comparison
%%%%%%%%%%%%%%%%%%%%%%%
% 
% M = readmatrix("tbz_24h.csv");
% t = M(:,1);
% I_bz_2 = M(:,2);
% I_tes_2 = M(:,3);
% I_ISS_2 = M(:,4);
% I_st_2 = M(:,5);
% 
% M_2 = readmatrix("tbz_240h.csv");
% I_bz = M_2(:,2);
% I_tes = M_2(:,3);
% I_ISS = M_2(:,4);
% I_st = M_2(:,5);
% 
% % td_2 = doublingTime_withoutSimResults(t,I_s_0+0.2, I_st_2) * 365; % add margin to I_s_0 (see utilities.findTBR)
% t_d_req = 5 * 365; % 5 years
% t_sim = 30 * 365;
% 
% % Reserve inventory
% % q = 0.25;
% % t_res = 24 * 3600;
% % I_res = N_dot/eta_f/f_b*q*t_res;
% % t_d = doublingTime((I_s_0+0.2), out) * 365;  % add margin to I_s_0 (see utilities.findTBR)
% % [dummy, index ] = min(I_st);
% % t_infl = out.tout(index);
% 
% % Plot is in days
% loglog(t,I_ISS, 'k--', t, I_st, 'k', t, I_tes, 'k-.', LineWidth=1.5)
% hold on;
% loglog(t,I_ISS_2, 'b--', t, I_st_2, 'b',  t, I_tes_2, 'b-.', LineWidth=1.5)
% 
% xline(t_d, 'r')
% % text(t_d + 100, 4,"t_d = " + round(t_d/365,1) + "y, AF = 50%")
% xline(td_2, 'r')
% % text(td_2 - 100, 100,"t_d = " + round(td_2/365,1) + "y, AF = 100%")
% 
% %yline(2*I_s_0, 'r')
% xlim([1e-1 1e4])
% ylim([1e-3 1e4])
% xlabel('Time (days)')
% ylabel('Inventory (kg)')
% legend('ISS', 'storage', 'TES', 'Location', 'northwest')
% grid('off')
% disp("Doubling time:  " + t_d/365 + " years")
% disp("Blanket inventory: " + round(max(I_bz)*1000,2) + " g" )
% disp("Inflection time: " + t_infl / 3600 + " h")
% ax=gcf;
% % exportgraphics(ax, 'C:\Users\smesc\OneDrive - Politecnico di Torino\PhD\fuelcycle\img\ARC_td_vs_AF.png', 'Resolution', 300)
